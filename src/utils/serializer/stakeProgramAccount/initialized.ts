/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import { Serializer, struct } from '@metaplex-foundation/umi/serializers';
import { Meta, MetaArgs, getMetaSerializer } from './types';

export type Initialized = Account<InitializedAccountData>;

export type InitializedAccountData = { meta: Meta };

export type InitializedAccountDataArgs = { meta: MetaArgs };

export function getInitializedAccountDataSerializer(): Serializer<
  InitializedAccountDataArgs,
  InitializedAccountData
> {
  return struct<InitializedAccountData>([['meta', getMetaSerializer()]], {
    description: 'InitializedAccountData',
  }) as Serializer<InitializedAccountDataArgs, InitializedAccountData>;
}

export function deserializeInitialized(rawAccount: RpcAccount): Initialized {
  return deserializeAccount(rawAccount, getInitializedAccountDataSerializer());
}

export async function fetchInitialized(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Initialized> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Initialized');
  return deserializeInitialized(maybeAccount);
}

export async function safeFetchInitialized(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Initialized | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeInitialized(maybeAccount) : null;
}

export async function fetchAllInitialized(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Initialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Initialized');
    return deserializeInitialized(maybeAccount);
  });
}

export async function safeFetchAllInitialized(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Initialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeInitialized(maybeAccount as RpcAccount));
}

export function getInitializedGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'stake',
    'Stake11111111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ meta: MetaArgs }>({ meta: [0, getMetaSerializer()] })
    .deserializeUsing<Initialized>((account) =>
      deserializeInitialized(account)
    );
}

export function getInitializedSize(): number {
  return 120;
}
