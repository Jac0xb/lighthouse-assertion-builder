/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  option,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type ProgramData = Account<ProgramDataAccountData>;

export type ProgramDataAccountData = {
  slot: bigint;
  upgradeAuthorityAddress: Option<PublicKey>;
  data: Uint8Array;
};

export type ProgramDataAccountDataArgs = {
  slot: number | bigint;
  upgradeAuthorityAddress: OptionOrNullable<PublicKey>;
  data: Uint8Array;
};

export function getProgramDataAccountDataSerializer(): Serializer<
  ProgramDataAccountDataArgs,
  ProgramDataAccountData
> {
  return struct<ProgramDataAccountData>(
    [
      ['slot', u64()],
      ['upgradeAuthorityAddress', option(publicKeySerializer())],
      // ['data', bytes({ size: u32() })],
    ],
    { description: 'ProgramDataAccountData' }
  ) as Serializer<ProgramDataAccountDataArgs, ProgramDataAccountData>;
}

export function deserializeProgramData(rawAccount: RpcAccount): ProgramData {
  return deserializeAccount(rawAccount, getProgramDataAccountDataSerializer());
}

export async function fetchProgramData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramData> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ProgramData');
  return deserializeProgramData(maybeAccount);
}

export async function safeFetchProgramData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramData | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeProgramData(maybeAccount) : null;
}

export async function fetchAllProgramData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramData[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ProgramData');
    return deserializeProgramData(maybeAccount);
  });
}

export async function safeFetchAllProgramData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramData[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProgramData(maybeAccount as RpcAccount));
}

export function getProgramDataGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      slot: number | bigint;
      upgradeAuthorityAddress: OptionOrNullable<PublicKey>;
      data: Uint8Array;
    }>({
      slot: [0, u64()],
      upgradeAuthorityAddress: [8, option(publicKeySerializer())],
      data: [null, bytes({ size: u32() })],
    })
    .deserializeUsing<ProgramData>((account) =>
      deserializeProgramData(account)
    );
}
