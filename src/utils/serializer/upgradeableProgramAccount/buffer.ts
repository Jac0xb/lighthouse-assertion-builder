/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  option,
  publicKey as publicKeySerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';

export type Buffer = Account<BufferAccountData>;

export type BufferAccountData = {
  authorityAddress: Option<PublicKey>;
  data: Uint8Array;
};

export type BufferAccountDataArgs = {
  authorityAddress: OptionOrNullable<PublicKey>;
  data: Uint8Array;
};

export function getBufferAccountDataSerializer(): Serializer<
  BufferAccountDataArgs,
  BufferAccountData
> {
  return struct<BufferAccountData>(
    [
      ['authorityAddress', option(publicKeySerializer())],
      // ['data', bytes({ size: u32() })],
    ],
    { description: 'BufferAccountData' }
  ) as Serializer<BufferAccountDataArgs, BufferAccountData>;
}

export function deserializeBuffer(rawAccount: RpcAccount): Buffer {
  return deserializeAccount(rawAccount, getBufferAccountDataSerializer());
}

export async function fetchBuffer(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Buffer> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Buffer');
  return deserializeBuffer(maybeAccount);
}

export async function safeFetchBuffer(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Buffer | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeBuffer(maybeAccount) : null;
}

export async function fetchAllBuffer(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Buffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Buffer');
    return deserializeBuffer(maybeAccount);
  });
}

export async function safeFetchAllBuffer(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Buffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBuffer(maybeAccount as RpcAccount));
}

export function getBufferGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      authorityAddress: OptionOrNullable<PublicKey>;
      data: Uint8Array;
    }>({
      authorityAddress: [0, option(publicKeySerializer())],
      data: [null, bytes({ size: u32() })],
    })
    .deserializeUsing<Buffer>((account) => deserializeBuffer(account));
}
