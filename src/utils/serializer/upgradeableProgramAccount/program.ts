/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type Program = Account<ProgramAccountData>;

export type ProgramAccountData = { programDataAddress: PublicKey };

export type ProgramAccountDataArgs = ProgramAccountData;

export function getProgramAccountDataSerializer(): Serializer<
  ProgramAccountDataArgs,
  ProgramAccountData
> {
  return struct<ProgramAccountData>(
    [['programDataAddress', publicKeySerializer()]],
    { description: 'ProgramAccountData' }
  ) as Serializer<ProgramAccountDataArgs, ProgramAccountData>;
}

export function deserializeProgram(rawAccount: RpcAccount): Program {
  return deserializeAccount(rawAccount, getProgramAccountDataSerializer());
}

export async function fetchProgram(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Program> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Program');
  return deserializeProgram(maybeAccount);
}

export async function safeFetchProgram(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Program | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeProgram(maybeAccount) : null;
}

export async function fetchAllProgram(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Program[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Program');
    return deserializeProgram(maybeAccount);
  });
}

export async function safeFetchAllProgram(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Program[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProgram(maybeAccount as RpcAccount));
}

export function getProgramGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ programDataAddress: PublicKey }>({
      programDataAddress: [0, publicKeySerializer()],
    })
    .deserializeUsing<Program>((account) => deserializeProgram(account));
}

export function getProgramSize(): number {
  return 32;
}
