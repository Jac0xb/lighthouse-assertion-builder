/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import { Serializer, struct } from '@metaplex-foundation/umi/serializers';

export type Uninitialized = Account<UninitializedAccountData>;

export type UninitializedAccountData = {};

export type UninitializedAccountDataArgs = UninitializedAccountData;

export function getUninitializedAccountDataSerializer(): Serializer<
  UninitializedAccountDataArgs,
  UninitializedAccountData
> {
  return struct<UninitializedAccountData>([], {
    description: 'UninitializedAccountData',
  }) as Serializer<UninitializedAccountDataArgs, UninitializedAccountData>;
}

export function deserializeUninitialized(
  rawAccount: RpcAccount
): Uninitialized {
  return deserializeAccount(
    rawAccount,
    getUninitializedAccountDataSerializer()
  );
}

export async function fetchUninitialized(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Uninitialized> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Uninitialized');
  return deserializeUninitialized(maybeAccount);
}

export async function safeFetchUninitialized(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Uninitialized | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUninitialized(maybeAccount) : null;
}

export async function fetchAllUninitialized(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Uninitialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Uninitialized');
    return deserializeUninitialized(maybeAccount);
  });
}

export async function safeFetchAllUninitialized(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Uninitialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeUninitialized(maybeAccount as RpcAccount)
    );
}

export function getUninitializedSize(): number {
  return 0;
}
